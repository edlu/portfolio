@use '../-base/_utilities.scss';
@import '../-abstracts/_mixins.scss';

:root {
    --gap-columns: var(--spacing-2x);
}

.columns {
    display: grid;
    grid-template-columns: repeat(12, 1fr);
    gap: var(--gap-columns);

    &--gapless {
        gap: 0;
    }

    &--debug {
        background-color: hsl(180 100% 90% / 0.4) !important;

        & > .column {
            background-color: hsl(0 100% 90% / 0.4) !important;
            border: 1px dotted hsl(0 100% 80% / 0.8) !important;
        }
    }

    .column {
        /* SPANS */
        $columns: (2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);

        // Generates column widths 2-12
        @each $column in $columns {
            &--#{$column} {
                grid-column: span #{$column} !important;

                // Each breakpoint
                @each $breakpoint in utilities.$spacing-breakpoints {
                    &-#{$breakpoint} {
                        @include for-size(#{$breakpoint}) {
                            grid-column: span #{$column} !important;
                        }
                    }
                }
            }
        }

        // START-SPAN MODIFIERS

        $columns: 12;
        $spans: (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);

        // Generates start-spans for all $columns
        $i: 1;
        @while $i <= $columns {
            &--#{$i} {
                //@debug inspect(#{start column $i});

                // Generate spans for each span but avoids exceeding 12
                $j: 1;
                @for $j from $j to (length($spans) + 1) {
                    @if $j <= ((length($spans) + 1) - $i) {
                        &-#{$j} {
                            grid-column: #{$i ''} / #{' span'} #{$j};
                        }
                        $j: $j + 1;
                    }
                }
            }
            $i: $i + 1;
        }

        &--1-end {
            grid-column: 1 / -1;
        }

        &--2-end {
            grid-column: 2 / -1;
        }

        &--3-end {
            grid-column: 3 / -1;
        }

        &--4-end {
            grid-column: 4 / -1;
        }

        &--5-end {
            grid-column: 5 / -1;
        }

        &--6-end {
            grid-column: 6 / -1;
        }

        &--7-end {
            grid-column: 7 / -1;
        }

        &--8-end {
            grid-column: 8 / -1;
        }

        &--9-end {
            grid-column: 9 / -1;
        }

        &--10-end {
            grid-column: 10 / -1;
        }

        &--11-end {
            grid-column: 11 / -1;
        }
    }
}
